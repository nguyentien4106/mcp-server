1. Use the Playwright MCP Server to navigate to https://www.saucedemo.com. All browser automation must be routed through the MCP Server. Do not simulate interactions or bypass the MCP in any part of the flow.
2. On the login page, execute and validate the following two scenarios:
Scenario 1: Valid Login
Scenario 2: Locked Out User
3. Scan the website to retrieve the credentials for both scenarios. Between both scenarios please logout to avoid cache issues.
4. After both scenarios are executed and validated
5. Close the browser.
6. Allow the MCP Server to complete the code generation.
7. Use the code found in the temp_codegen folder as a reference.
8. Transpile the test code to a Playwright framework using TypeScript.
9. Organize the Playwright project, create the tests(each one should be independent, no dependencies between them),  Use the Page Object Model structure. Store reusable data in the fixtures folder(if they are credentials, put them in the playwright.env.json) like test data or expected results.
10. In the root directory  Create a .gitignore file that excludes node_modules and playwright.env.json.
11. Create a cy task to get detail logs for the actions, and assertions in the terminal, implement it in the framework, just call the cy task to print console logs.
12. In the root directory Add a README.md file that documents how to run the tests and describes the project structure.
13. Install dependencies and Run the framework in headless mode by CLI using cypress run. Check that Cypress and all the tests runs without issues. Failures are accepted, framework configuration issues are not.
14. In the root directory  Set up a GitHub Actions workflow to install dependencies and run the Cypress tests,  The branch name is not main as usualy, it is master.
15. Then, push the latest changes using the GitHub MCP Server root directory to the remote repository. The repo already exists.

In the chat post: "Run the 15 steps until all the process is completed."